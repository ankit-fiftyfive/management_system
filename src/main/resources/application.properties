#port
server.port = 9090

#database configuration:mysql
#main database
spring.datasource.url = jdbc:mysql://localhost:3306/employee_management
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect


# H2 Database
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#Keycloak Configuration
keycloak.realm = employeeManagement
keycloak.auth-server-url = http://localhost:8080
keycloak.resource = employeeManagement_keycloak
keycloak.public-client = true
keycloak.bearer-only = true
keycloak.use-resource-role-mappings = true

spring.security.oauth2.client.registration.oauth-client-credentials.client-id = employeeManagement_keycloak
spring.security.oauth2.client.registration.oauth-client-credentials.client-secret = kpWeiXsLu4GImTOsipM3LuGMmlHFVJhf
spring.security.oauth2.client.registration.oauth-client-credentials.scope = openid, profile, roles
spring.security.oauth2.client.registration.oauth-client-credentials.authorization-grant-type = password
spring.security.oauth2.client.registration.oauth-client-credentials.provider = keycloak

spring.security.oauth2.client.provider.keycloak.issuer-uri = http://localhost:8080/realms/employeeManagement
spring.security.oauth2.client.provider.keycloak.token-uri = http://localhost:8080/realms/employeeManagement/protocol/openid-connect/token
